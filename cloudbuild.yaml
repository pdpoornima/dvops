options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_MEDIUM'  # Change here to match the cluster's node type
  

steps:
  # Step 1: Authenticate with the Kubernetes cluster
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - 'my-gke-cluster'
      - '--zone'
      - 'us-east5-a'
      - '--project'
      - 'devops-433705'

  # Step 2: Set up environment variables (if necessary)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        export GOOGLE_APPLICATION_CREDENTIALS=${_GOOGLE_APPLICATION_CREDENTIALS}
        echo "Credentials set for service account"

  # Step 3: Initialize Terraform in the correct directory
  - name: 'hashicorp/terraform:light'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'cd terraform && terraform init'

  # Step 4: Run Terraform plan
  - name: 'hashicorp/terraform:light'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'cd terraform && terraform plan -out=tfplan'

  # Step 5: Run Terraform apply
  - name: 'hashicorp/terraform:light'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'cd terraform && terraform apply -auto-approve tfplan'
  # Step 6: Create the 'gitops' namespace if it does not exist
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        kubectl get namespace gitops || kubectl create namespace gitops
  # Step 6: Create the 'argocd' namespace if it does not exist
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        kubectl get namespace argocd || kubectl create namespace argocd


  # Step 8: Install ArgoCD
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-n'
      - 'argocd'
      - '-f'
      - 'https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml'
  # Step 9: Wait for ArgoCD components to be ready
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'rollout'
      - 'status'
      - 'deployment/argocd-server'
      - '-n'
      - 'argocd'
  # Step 10: Get the ArgoCD server's external IP
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'get-argocd-ip'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        ARGOCD_IP=$(kubectl -n argocd get svc argocd-server -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "ArgoCD Server External IP: $ARGOCD_IP"
  # Step 11: Login to ArgoCD using the external IP
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        argocd login --insecure --username admin --password $ARGOCD_PASSWORD --grpc-web $ARGOCD_IP:443

  # Step 12: Create ArgoCD Application
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'argocd-application.yaml'


  # Step 13: Sync the ArgoCD Application
  - name: 'argoproj/argocd'
    entrypoint: 'argocd'
    args:
      - 'app'
      - 'sync'
      - 'devops-433705-app'


timeout: 1200s
