options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_MEDIUM'  # Change here to match the cluster's node type

  

steps:
  # Step 1: Authenticate with the Kubernetes cluster
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - 'my-gke-cluster'
      - '--zone'
      - 'us-east5-a'
      - '--project'
      - 'devops-433705'

  # Step 2: Set up environment variables (if necessary)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        export GOOGLE_APPLICATION_CREDENTIALS=${_GOOGLE_APPLICATION_CREDENTIALS}
        echo "Credentials set for service account"

  # Step 3: Initialize Terraform in the correct directory
  - name: 'hashicorp/terraform:light'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'cd terraform && terraform init'

  # Step 4: Run Terraform plan
  - name: 'hashicorp/terraform:light'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'cd terraform && terraform plan -out=tfplan'

  # Step 5: Run Terraform apply
  - name: 'hashicorp/terraform:light'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'cd terraform && terraform apply -auto-approve tfplan'
  # Step 6: Create the 'gitops' namespace if it does not exist
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        kubectl get namespace gitops || kubectl create namespace gitops
  # Step 7: Create the 'argocd' namespace if it does not exist
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        kubectl get namespace argocd || kubectl create namespace argocd


  # Step 8: Install ArgoCD
  # Step 8: Apply ArgoCD YAML file from the repository
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing ArgoCD..."
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        echo "ArgoCD installation completed or encountered an error."
  # Step 9: Patch the ArgoCD server to LoadBalancer
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Patching ArgoCD server to LoadBalancer..."
        kubectl -n argocd patch svc argocd-server -p '{"spec": {"type": "LoadBalancer"}}'
      

  # Step 10: Wait for ArgoCD components to be ready
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Waiting for ArgoCD components to be ready..."
        kubectl wait --for=condition=available --timeout=600s -n argocd deployment/argocd-server
        kubectl wait --for=condition=available --timeout=600s -n argocd deployment/argocd-repo-server
        kubectl wait --for=condition=available --timeout=600s -n argocd deployment/argocd-application-controller
        kubectl wait --for=condition=available --timeout=600s -n argocd deployment/argocd-dex-server
        echo "All ArgoCD components are ready."

  # Step to install ArgoCD CLI
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing ArgoCD CLI..."
        curl -sSL https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 -o /usr/local/bin/argocd
        chmod +x /usr/local/bin/argocd
        echo "ArgoCD CLI installation completed."
  # Step 12: Wait for ArgoCD external IP to be available
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Fetching service details..."
        kubectl describe svc argocd-server -n argocd
        echo "Service details fetched."
        echo "Waiting for ArgoCD external IP..."
        for i in {1..30}; do
          _ARGOCD_IP=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [[ -n "$_ARGOCD_IP" ]]; then
            echo "ArgoCD Server External IP: $_ARGOCD_IP"
            break
          fi
          echo "External IP not available yet. Retrying in 10 seconds..."
          sleep 10
        done

        if [[ -z "$_ARGOCD_IP" ]]; then
          echo "Error: Failed to retrieve ArgoCD external IP after multiple attempts."
          exit 1
        fi

 
  # Step 13: Login to ArgoCD
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Logging in to ArgoCD..."
        kubectl config set-context --current --namespace argocd
        argocd login $_ARGOCD_IP --username admin --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
                  

  # Step 14: Create ArgoCD Application
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'argocd-application.yaml'


  # Step 15: Sync ArgoCD Application
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Syncing ArgoCD application"
        argocd app sync devops-433705-app --server $_ARGOCD_IP


timeout: 1200s
